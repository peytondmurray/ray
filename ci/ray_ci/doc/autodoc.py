import os
import re
from typing import List, Set

from ci.ray_ci.doc.api import (
    API,
    _SPHINX_AUTOSUMMARY_HEADER,
    _SPHINX_AUTOCLASS_HEADER,
)


_SPHINX_CURRENTMODULE_HEADER = ".. currentmodule::"
_SPHINX_TOCTREE_HEADER = ".. toctree::"
_SPHINX_INCLUDE_HEADER = ".. include::"


class Autodoc:
    """Structure that finds all autodoc APIs generated by sphinx."""

    def __init__(self, rsts: List[str]):
        """
        Args:
            head_rst_file: The path to the landing page rst file that contains the list
            of children rsts of the autodoc APIs
        """
        self._rsts = rsts
        self._autodoc_rsts = None
        self._apis = None

    def _get_autodoc_rsts(self) -> Set[str]:
        """Recursively parse the head_rst_file to find all the autodoc directives."""
        for rst in self._rsts:
            self._autodoc_rsts[rst] = self._parse_autodoc_directives(rst)

        return self._autodoc_rsts

    def _parse_autodoc_directives(self, rst_file: str) -> List[API]:
        """Parse the rst file to find the autodoc APIs.

        Example content of the rst file:

            .. currentmodule:: mymodule

            .. autoclass:: myclass

            .. autosummary::

                myclass.myfunc_01
                myclass.myfunc_02
        """
        if not os.path.exists(rst_file):
            return []

        apis = []
        module = None
        with open(rst_file, "r") as f:
            line = f.readline()
            while line:
                # parse currentmodule block
                if line.startswith(_SPHINX_CURRENTMODULE_HEADER):
                    module = line[len(_SPHINX_CURRENTMODULE_HEADER) :].strip()

                # parse autoclass block
                if line.startswith(_SPHINX_AUTOCLASS_HEADER):
                    apis.append(API.from_autoclass(line, module))

                # parse autosummary block
                if line.startswith(_SPHINX_AUTOSUMMARY_HEADER):
                    doc = line
                    line = f.readline()
                    # collect lines until the end of the autosummary block
                    while line:
                        doc += line
                        if line.strip() and not re.match(r"\s", line):
                            # end of autosummary, \s means empty space, this line is
                            # checking if the line is not empty and not starting with
                            # empty space
                            break
                        line = f.readline()

                    apis.extend(API.from_autosummary(doc, module))
                    continue

                line = f.readline()

        return [api for api in apis if api]
